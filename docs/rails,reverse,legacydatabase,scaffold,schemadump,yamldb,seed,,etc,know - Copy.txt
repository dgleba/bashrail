_____________


schema_to_scaffold

 > usage:   scaffold
 
 this didn't work on cilisting1
 I did
 rake db:schema:dump
 rails g model Cilisting1
 then 
 put table name in model because it's not standard...
 then..
 echo '@cnames= Cilisting1.column_names; @cnames.join(",")' | spring rails c
 2016-08-18
 
 gem install schema_to_scaffold
 
_____________


to extract tables from a database  -  reverse engineer.

rake db:schema:dump


to create tables in a database....

rake db:schema:load

_____________
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



good to switch to mysql from sqlite or reverse or other...

yamldb

gem 'yaml_db'

gem "yaml_db", :git => "git://github.com/dgleba/yaml_db.git"

-

export data

no..
rake db:data:dump


yes...

rake db:data:dump_dir

-

import data
rake db:data:load 


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_____________


gem 'seed_dump'

yes..

rake db:seed:dump FILE=db/seeddump.rb  LIMIT=9 



works..

    rake db:seed:dump FILE=db/seeddump.rb  LIMIT=10 EXCLUDE=audit,version MODELS="User,Role,StfAsset,StfEmployee,TrCell,TrCourse,TrCustomer,Tr,TrPart,TrProgram,TrTrainingRecord,TrType"


Get models list.. 
{
     echo 'Rails.application.eager_load! ; ActiveRecord::Base.send(:subclasses).map(&:name).join(",")' | spring rails c
      works..
        output..
     "Audited::Adapters::ActiveRecord::Audit,User,Role,StfAsset,StfEmployee,TrCell,TrCourse,TrCustomer,Tr,TrPart,TrProgram,TrType,Audit"


    http://stackoverflow.com/questions/516579/is-there-a-way-to-get-a-collection-of-all-the-models-in-your-rails-app
    
    eg: run console from bash..  echo '@cnames= SrPart.column_names; @cnames.join(",")' | spring rails c

    no, need classes, mysql: show tables; notepad++ replace \r\n with ,
      corrective_actions,roles,stf_assets,stf_employees,tr_cells,tr_courses,tr_customers,tr_parts,tr_programs,tr_training_employees,tr_training_records,tr_types,users
}

no..
rake db:seed:dump APPEND=true

_____________


rake db:populate


gem 'populator'
gem 'faker'

_____________

http://stackoverflow.com/questions/10301794/difference-between-rake-dbmigrate-dbreset-and-dbschemaload

db:migrate runs (single) migrations that have not run yet.
db:create creates the database
db:drop deletes the database
db:schema:load creates tables and columns within the (existing) database following schema.rb
db:setup does db:create, db:schema:load, db:seed
db:reset does db:drop, db:setup

=

By issuing rake -T you have the following database tasks:

rake db:create          # Create the database from DATABASE_URL or config/database.yml for the current Rails.env (use db:create:all to create all dbs in the config)
rake db:drop            # Drops the database using DATABASE_URL or the current Rails.env (use db:drop:all to drop all databases)
rake db:fixtures:load   # Load fixtures into the current environment's database
rake db:migrate         # Migrate the database (options: VERSION=x, VERBOSE=false)
rake db:migrate:status  # Display status of migrations
rake db:rollback        # Rolls the schema back to the previous version (specify steps w/ STEP=n)
rake db:schema:dump     # Create a db/schema.rb file that can be portably used against any DB supported by AR
rake db:schema:load     # Load a schema.rb file into the database
rake db:seed            # Load the seed data from db/seeds.rb
rake db:setup           # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the db first)
rake db:structure:dump  # Dump the database structure to db/structure.sql
rake db:version         # Retrieves the current schema version number


_____________

_____________




